services:
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    ports:
      - "${API_GATEWAY_HOST_PORT:-18056}:8000"
    environment:
      - ADMIN_API_URL=http://admin-api:8001
      - BOT_MANAGER_URL=http://bot-manager:8080
      - TRANSCRIPTION_COLLECTOR_URL=http://transcription-collector:8000
      - LOG_LEVEL=DEBUG
    init: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      admin-api:
        condition: service_healthy
      bot-manager:
        condition: service_healthy
      transcription-collector:
        condition: service_started
    networks:
      - vexa_default
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=PathPrefix(`/`)"
      - "traefik.http.routers.api-gateway.priority=1"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8000"

  admin-api:
    build:
      context: .
      dockerfile: services/admin-api/Dockerfile
    ports:
      - "${ADMIN_API_HOST_PORT:-18057}:8001"
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vexa
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - LOG_LEVEL=DEBUG
    init: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - vexa_default
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin-api.rule=PathPrefix(`/admin`)"
      - "traefik.http.routers.admin-api.priority=10"
      - "traefik.http.services.admin-api.loadbalancer.server.port=8001"
      - "traefik.http.middlewares.admin-strip.stripprefix.prefixes=/admin"
      - "traefik.http.routers.admin-api.middlewares=admin-strip"

  bot-manager:
    build:
      context: .
      dockerfile: services/bot-manager/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0
      - BOT_IMAGE_NAME=${BOT_IMAGE_NAME:-vexa-bot:node-proxy-fix}
      - DOCKER_NETWORK=${COMPOSE_PROJECT_NAME:-vexa}_vexa_default
      - LOG_LEVEL=DEBUG
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vexa
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DOCKER_HOST=unix://var/run/docker.sock
      - DEVICE_TYPE=${DEVICE_TYPE:-cpu}
      - WHISPER_LIVE_URL=ws://websocket-proxy:8090
      - WEBSOCKET_PROXY_HOST=websocket-proxy
      - WEBSOCKET_PROXY_PORT=8090
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    init: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      websocket-proxy:
        condition: service_started
    networks:
      - vexa_default
    restart: unless-stopped

  whisperlive:
    profiles: ["gpu"]
    build:
      context: .
      dockerfile: services/WhisperLive/Dockerfile.project
    volumes:
      - ./hub:/root/.cache/huggingface/hub
      - ./services/WhisperLive/models:/app/models
    environment:
      # Use Redis Stream URL instead of WebSocket URL
      - REDIS_STREAM_URL=redis://redis:6379/0/transcription_segments
      # Keep the old URL for backward compatibility
      - TRANSCRIPTION_COLLECTOR_URL=redis://redis:6379/0/transcription_segments
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_STREAM_NAME=transcription_segments
      - LANGUAGE_DETECTION_SEGMENTS=${LANGUAGE_DETECTION_SEGMENTS}
      - VAD_FILTER_THRESHOLD=${VAD_FILTER_THRESHOLD}
      - DEVICE_TYPE=${DEVICE_TYPE}
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        if [ "$${DEVICE_TYPE}" = "cuda" ]; then
          echo 'INFO: DEVICE_TYPE is cuda, starting WhisperLive GPU service.' &&
          exec python3 /app/run_server.py --port 9090 --backend faster_whisper -fw /root/.cache/huggingface/hub/models--Systran--faster-whisper-medium/snapshots/08e178d48790749d25932bbc082711ddcfdfbc4f;
        else
          echo "INFO: DEVICE_TYPE is not cuda (it is '$${DEVICE_TYPE}'), WhisperLive GPU service will not start. Sleeping indefinitely." &&
          sleep infinity;
        fi
    expose:
      - "9090" #use for transcription web socket
      - "9091" #use for health check
    deploy:
      replicas: 1 # Sets to 1 to avoid GPU contention
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["3"] # Ensure this is configurable or correct for your setup
              capabilities: [gpu]
    init: true
    depends_on:
      transcription-collector:
        condition: service_started
    networks:
      - vexa_default
      - whispernet
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Add Traefik labels for service discovery
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whisperlive-router.rule=Host(`whisperlive.internal`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.whisperlive-router.entrypoints=web"
      - "traefik.http.services.whisperlive-service.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.whisperlive-ws-headers.headers.customrequestheaders.Connection=upgrade"
      - "traefik.http.middlewares.whisperlive-ws-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.whisperlive-router.middlewares=whisperlive-ws-headers"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.port=9091"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.scheme=http"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.interval=2s"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.timeout=1s"

  # WebSocket Proxy for bot-to-WhisperLive communication (GPU/CPU adaptive)
  websocket-proxy:
    build:
      context: services/websocket-proxy
      dockerfile: Dockerfile
    ports:
      - "8088:8088"  # HTTP server for audio data
      - "8090:8090"  # WebSocket server for bot connections
    environment:
      # Dynamic WhisperLive URL - GPU uses 'whisperlive', CPU uses 'whisperlive-cpu'
      - WHISPER_LIVE_URL=ws://whisperlive:9090
      - WHISPER_LIVE_URL_FALLBACK=ws://whisperlive-cpu:9090
      - PORT=8090
      - HTTP_PORT=8088
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379/0
    networks:
      - vexa_default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      redis:
        condition: service_started
      # Dependencies are profile-based - either GPU or CPU WhisperLive will be available
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket-proxy-http.rule=PathPrefix(`/proxy`)"
      - "traefik.http.routers.websocket-proxy-http.priority=10"
      - "traefik.http.services.websocket-proxy-http.loadbalancer.server.port=8088"
      - "traefik.http.routers.websocket-proxy-ws.rule=PathPrefix(`/ws-proxy`)"
      - "traefik.http.routers.websocket-proxy-ws.priority=11"
      - "traefik.http.services.websocket-proxy-ws.loadbalancer.server.port=8090"

  whisperlive-cpu:
    profiles: ["cpu"]
    build:
      context: .
      dockerfile: services/WhisperLive/Dockerfile.cpu
    volumes:
      - ./hub:/root/.cache/huggingface/hub
      - ./services/WhisperLive/models:/app/models
    environment:
      - REDIS_STREAM_URL=redis://redis:6379/0/transcription_segments
      - TRANSCRIPTION_COLLECTOR_URL=redis://redis:6379/0/transcription_segments
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_STREAM_NAME=transcription_segments
      - LANGUAGE_DETECTION_SEGMENTS=${LANGUAGE_DETECTION_SEGMENTS}
      - VAD_FILTER_THRESHOLD=${VAD_FILTER_THRESHOLD}
      - DEVICE_TYPE=cpu
    entrypoint: /bin/sh
    deploy:
      replicas: 2
    command:
      - "-c"
      - |
        if [ "$${DEVICE_TYPE}" = "cpu" ]; then
          echo 'INFO: DEVICE_TYPE is cpu, starting WhisperLive CPU service.' &&
          exec python3 /app/run_server.py --port 9090 --backend faster_whisper -fw /root/.cache/huggingface/hub/models--Systran--faster-whisper-tiny/snapshots/d90ca5fe260221311c53c58e660288d3deb8d356;
        else
          echo "INFO: DEVICE_TYPE is not cpu (it is '$${DEVICE_TYPE}'), WhisperLive CPU service will not start. Sleeping indefinitely." &&
          sleep infinity;
        fi
    expose:
      - "9090" #use for transcription web socket
      - "9091" #use for health check
    init: true
    depends_on:
      transcription-collector:
        condition: service_started
    networks:
      - vexa_default
      - whispernet
    # Don't auto-start CPU version, users can manually start it
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Add Traefik labels for service discovery
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whisperlive-router.rule=Host(`whisperlive.internal`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.whisperlive-router.entrypoints=web"
      - "traefik.http.services.whisperlive-service.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.whisperlive-ws-headers.headers.customrequestheaders.Connection=upgrade"
      - "traefik.http.middlewares.whisperlive-ws-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.whisperlive-router.middlewares=whisperlive-ws-headers"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.port=9091"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.scheme=http"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.interval=2s"
      - "traefik.http.services.whisperlive-service.loadbalancer.healthcheck.timeout=1s"

  # Replace nginx load-balancer with Traefik
  traefik:
    image: traefik:v2.10
    ports:
      - "${TRAEFIK_WEB_HOST_PORT:-8080}:80" # Expose on host port (changed from 9090 to avoid conflict)
      - "${TRAEFIK_DASHBOARD_HOST_PORT:-8085}:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.toml:/etc/traefik/traefik.toml:ro
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
      - "--providers.docker.constraints=Label(`traefik.enable`, `true`)"
      - "--providers.docker.watch=true"
    networks:
      vexa_default:
        aliases:
          - whisperlive.internal
      whispernet:
        aliases:
          - whisperlive.internal
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  ai-service-adapter:
    build:
      context: .
      dockerfile: services/ai-service-adapter/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - WHISPER_LIVE_URL=http://whisperlive-cpu:9090
    init: true
    networks:
      - vexa_default
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-adapter.rule=PathPrefix(`/ai`)"
      - "traefik.http.routers.ai-adapter.priority=10"
      - "traefik.http.services.ai-adapter.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.ai-adapter-strip.stripprefix.prefixes=/ai"
      - "traefik.http.routers.ai-adapter.middlewares=ai-adapter-strip"

  transcription-collector:
    build:
      context: .
      dockerfile: services/transcription-collector/Dockerfile
    ports:
      - "${TRANSCRIPTION_COLLECTOR_HOST_PORT:-8123}:8000"
    volumes:
      - ./alembic.ini:/app/alembic.ini
      - ./libs/shared-models/alembic:/app/alembic
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vexa
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_STREAM_NAME=transcription_segments
      - REDIS_CONSUMER_GROUP=collector_group
      - REDIS_STREAM_READ_COUNT=10
      - REDIS_STREAM_BLOCK_MS=2000
      - BACKGROUND_TASK_INTERVAL=10
      - IMMUTABILITY_THRESHOLD=30
      - REDIS_SEGMENT_TTL=3600
      - REDIS_CLEANUP_THRESHOLD=86400
      - LOG_LEVEL=DEBUG
      - AI_SERVICE_ADAPTER_URL=${AI_SERVICE_ADAPTER_URL}
    init: true
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - vexa_default
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transcripts.rule=PathPrefix(`/transcripts`)"
      - "traefik.http.routers.transcripts.priority=10"
      - "traefik.http.services.transcripts.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.transcripts-strip.stripprefix.prefixes=/transcripts"
      - "traefik.http.routers.transcripts.middlewares=transcripts-strip"

  redis:
    image: redis:7.0-alpine
    command:
      ["redis-server", "--appendonly", "yes", "--appendfsync", "everysec", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - vexa_default
    restart: unless-stopped
    ports:
      - "6379:6379"  # Expose for debugging if needed

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=vexa
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vexa"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - vexa_default
    restart: unless-stopped
    ports:
      - "${POSTGRES_HOST_PORT:-15438}:5432"

  # Enhanced Audio Router Service - Real-time audio routing to WhisperLive
  enhanced-audio-router:
    build:
      context: services/vexa-bot/core
      dockerfile: Dockerfile.enhanced-audio-router
    environment:
      - ENHANCED_PROXY_PORT=8090
      - ENHANCED_PROXY_HOST=0.0.0.0
      - WHISPER_LIVE_URL=ws://whisperlive-cpu:9090
      - LOG_LEVEL=DEBUG
    ports:
      - "${ENHANCED_AUDIO_ROUTER_PORT:-8090}:8090"
    networks:
      - vexa_default
    restart: unless-stopped
    depends_on:
      whisperlive-cpu:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/enhanced/status"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=false"  # Audio router doesn't need HTTP routing

  # Vexa Bot Service - Teams meeting bot with transcription
  vexa-bot:
    build:
      context: services/vexa-bot/core
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0
      - WHISPER_LIVE_URL=ws://whisperlive-cpu:9090
      - ENHANCED_AUDIO_ROUTER_HOST=enhanced-audio-router
      - ENHANCED_AUDIO_ROUTER_PORT=8090
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vexa
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - LOG_LEVEL=DEBUG
      - DISPLAY=:99
      # Audio system configuration
      - PULSE_RUNTIME_PATH=/tmp/pulse-runtime
      - PULSE_SERVER=unix:/tmp/pulse-runtime/pulse/native
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - /dev/shm:/dev/shm:rw
      - pulse-runtime:/tmp/pulse-runtime
    networks:
      - vexa_default
    restart: unless-stopped
    privileged: false
    security_opt:
      - seccomp:unconfined
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      enhanced-audio-router:
        condition: service_started
    labels:
      - "traefik.enable=false"  # Bot doesn't need HTTP routing

  # System Health Monitor
  health-monitor:
    image: nginx:alpine
    command: |
      sh -c 'cat > /etc/nginx/nginx.conf << EOF
      events { worker_connections 1024; }
      http {
        server {
          listen 8080;
          location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
          }
          location /status {
            access_log off;
            return 200 "{\"status\":\"ok\",\"timestamp\":\"$$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"services\":{\"api-gateway\":\"http://api-gateway:8000\",\"admin-api\":\"http://admin-api:8001\",\"bot-manager\":\"http://bot-manager:8080\",\"transcription-collector\":\"http://transcription-collector:8000\",\"websocket-proxy\":\"http://websocket-proxy:8088\",\"whisperlive-cpu\":\"http://whisperlive-cpu:9091\"}}";
            add_header Content-Type application/json;
          }
        }
      }
      EOF
      nginx -g "daemon off;"'
    ports:
      - "19000:8080"
    networks:
      - vexa_default
    restart: unless-stopped
    depends_on:
      - api-gateway
      - admin-api
      - bot-manager
      - transcription-collector
      - websocket-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.health-monitor.rule=PathPrefix(`/health`) || PathPrefix(`/status`)"
      - "traefik.http.routers.health-monitor.priority=20"
      - "traefik.http.services.health-monitor.loadbalancer.server.port=8080"

volumes:
  redis-data:
  postgres-data:
  pulse-runtime:

networks:
  vexa_default:
    driver: bridge
  whispernet:
    driver: bridge
